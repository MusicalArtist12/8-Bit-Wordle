7-5-23
    START:
        write an 8 bit version of wordle for the ATmega328p

    I'll need to write:
        A pseudo-random number generator
        output buffer?

    What memory can I address?
        Flash Program memory
            0x0000:0x3FFF
        
        SRAM Data memory
            0x0000:0x001F 32 Registers
                R0:R15 Internal
                R16:R25 I/O
                R26:R31 I/O + "16-bit addr pointers"? 
            
            0x0020:0x005F 64 I/O Registers
            0x0060:0x00FF 160 Ext I/O Registers
            0x0100:0x08FF Internal SRAM (Stack?), 1048x8

        EEPROM Data memory
            1Kb
            ~ More info in datasheet, page 19,22


    How input/output?
        cursor with arrows

    How output?

    Game loop
        6 guesses
            enter a word
        
            feedback on second row
                x if not at all, o if incorrect location
                remove letters marked with an x

            be able to view previous guesses 

        if a guess is right, display correct

https://www.openhacks.com/uploadsproductos/eone-1602a1.pdf ~ saved as 1602A_datasheet.pdf
https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf



for the wait_BF method, do I have to set and clear the E pin every check, or can it be held?
    have to set E every check

Adafruit Metro clock speed:
    16 * 2^20 = 2^24


SI units
M (mega) - 10^6, 2^20
k (kilo) - 10^3, 2^10

m (milli) - 10^-3, 2^-10
u (micro) - 10^-6, 2^-20
n (nano)  - 10^-9, 2^-30

7/5/23 summary
    this is a better implementation of all of this compared to last time


7/8/23 
    its a good day to figure out pseudo random number generaton. i'm going to code something in c++ to understand things. then i'll implement it

    It does not need to be a GOOD prng, it just has to be A prng

    ok, i'm going to use a linear-feedback shift register. 
    it might use xorshift as a base.

    ok, i've got a working randomizer working. 

    it can give 32 unique random numbers per seed. and the seed can be 0 < n <= 255. if the same seed is used twice, then it'll be the same numbers, twice.
    those numbers are between 0 and 255. 


    i'm going to call that good for now. 

    about the seed:
        create a timer on the second timer interrupt that counts ms from startup, 
        then use that time as a seed.
        
        get a new seed every 12 guesses or so. 

        it still is sequential, which is kinda a problem...
            this would be solved by a nonlinear
            
        if i did % 128 on the dataset, then each number could in theory be followed by 2 different numbers
                 % 64 would have 4 different possibilities following it. 
                 % 32 would have 8 

    


http://www.avr-asm-tutorial.net/avr_en/beginner/addressing/addressing_eeprom.html


rjmp:   ( PC - 2K (word) + 1 ) < k < ( PC + 2K (word) )

        ( PC - 4Kib + 1 ) < k < ( PC + 4Kib )
        ( PC - 0x1000 + 0x0001 ) < k < ( PC + 0x1000)

Flash Program memory
    0x0000:0x3FFF

main    0x0100
display 0x0200
delay   0x0300
input   0x0400



7-15
    got a new board for this project
    soldered on "male" headers. 
        0, 1, 2, 5, 8, 9, 10 do not have valid connections

8-26
    its been a month. i haven't really worked on it all that much.

    however, I just solved a few big problems. 
    
    first, I figured out the register layout that I want to use. 

    second, I figured out how to hexidecimal values to the display. this will be critical in debugging later.
